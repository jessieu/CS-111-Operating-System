NAME: Weilan Yu
EMAIL: yuweilan@g.ucla.edu
ID: 005119471

1. General Idea
   - lab0.c 
     - This program copies the standard input to the standard output by default.
     - With user specified option "--input", and "--output", the program can direct input to output by using read, write and dup2 syscall.
     - "--segfault" generates segmentation fault immediately, instead of after copying input to output.
     - "--catch" used before "--segfault" can catch the segfault and handle it with user defined signal handler, which just simply print a message indicates the segmentation fault is caught.
     - "--dump-core" dump core on segmentation faults, which catch the segfault with default handler and exit.
   - Makefile 
     - default: build executable file
     - check: run quick smoke tests to verify whether the program works or not
     - clean: delete all files created by the makefile
     - dist: make a distribution tarball 
   - Smoke Test
     - InToOut: copies the input file to output file, expect they are identical
     - UnrecognizedArg: pass a unrecognized argument and expect the error message and correct usage
     - BadInputTest: pass a file not existed as argument, expect the file cannot open and exit with correct exit code.
     - BadOutputTest: create a file that cannot be modified, and use it as "--output" argument, expect failed to write and exit with correct exit code.
     - CatchTest: generate segmentation fault and catch it, expect handle successfully and exit with correct exit code.
     - DumpCoreTest: generate segmentation fault, and dump core on it, expect exit with correct exit code.
     - DumpBfCatchTest: generate segmentation fault, use dump-core to handle the segfault, then convert to user-defined handler, expect the signal would be handled by catch instead of Dump-core. 
   - backtrace.png
     - A screenshot shows stack backtrace of segmentation fault caused by "--segfault"
   - breakpoint.png
     - A screenshot shows the pointer is null before segmentation fault happen by setting a breakpoint before generating the segfault.


2. Challenges 
   1. How to use getopt_long and optarg 
   2. To figure out the difference between dup and dup2, and choose between them. 
      - dup assigns the lowest available file descriptor number
        - It needs to close the standard output for the current processes, then reassigns standard output to go to the file
      - dup2 allow to choose the file descriptor number
        - Compared to dup, dup2 is more convenient.
   3. What the "--dump-core" does?
      - Based on my research, the exit code of segmentation fault is 139, and the dump-core's exit code is 139. SIG_DFL will inform the kernel there's no user defined signal handler for the given signal, and thus the kernel should take default action for it. Thus, if we handle the SIGSEGV with default handler, the action will terminate the program with core dump. Since the exit code of segmentation fault is 139, by using the signal (SIGSEGV, SIG_DFL), the program will dump core on segmentation fault as desired.
   4. Makefile
      - It takes me for a while to figure out how to write testcase inside the makefile. And the terminal output error does not give a lot of help. 
      - The most common error I came across is "unexpected end of file". After researching it, I realize that a '\\' is necessary on line ending for writing multiple line bash.
      - And also, there are too many unwanted output generated by the lab0 program. To keep the test output only, I use .SILENT at the begining of the makefile to supress the test case content output, and redirect the program output to /dev/null.   
   5. Sanity Test
      - The first time I ran the test, it showed that my program has 3 errors.
      	1. In Makefile, I forgot to remove the tarball when rm is called.
	2. After using dup2, I did not close the file descriptor.
	3. When the unrecognized argument was detected, I did not output the strerror. 


3. References:
   1. getopt_long https://linux.die.net/man/3/getopt_long
   2. Signal handle https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/19/lec.html#orgheadline13
   3. Make a core dump https://www.geeksforgeeks.org/core-dump-segmentation-fault-c-cpp/
   4. The exit code of segfault  https://www.student.cs.uwaterloo.ca/~cs136/seashell/docs/seashell-error-codes.html
   5. What SIG_DFL does? https://stackoverflow.com/questions/33922223/what-exactly-sig-dfl-do
   6. Suppress program output in make check https://serverfault.com/questions/41964/how-to-hide-the-output-of-a-shell-application-in-linux

   