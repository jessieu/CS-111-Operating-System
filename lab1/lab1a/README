1. Introduction
    This program is part of a simple shell script, which support "rdonly", "wronly", "command", and "verbose" option.
    -- With "rdonly", a specified file is opened read only.
    -- With "wronly", a specified file is opened write only.
    -- With "command fd1 fd2 fd3", a specified shell command will be executed
       , in which input from fd1, output to fd2, and error directed to fd3.
       Those fds are the fds opened by previous option.
    -- With "verbose", all options after it will be printed.
2. Testcases
   In my own testcases, I test an invalid input, verbose option, and cat command. All of them passed.

3. Challenge
   1. Understanding optind and optarg
      On each run of getopt(), until it reaches the end of the argument list and returns -1, it will check the next argument and return the option found or ? if an unrecognized option was given.
      By default, getopt() permutes the contents of argv as it scans, so that eventually all the nonoptions are at the end. 
      optind is modified to index the first nonoption.
      optarg will only give the argument next to the option, if we need to retrieve multiple argument after the option, we will need to use the optind traverses the non option arguments.

   2. Exit code for lab1a
      Since we haven't implemented the wait option, there's no wait in the code. And thus, if the option is valid and execution is ok, we exit with 0, otherwise, we exit with 1.
      The problem I have in the exit code is I did not check the validation of the given file descriptor. To do it, I add -1 into the end of fd_list indicates it's not taken yet. And if the input fd is greater than the fd_list size and its value is negative, then it is invalid.In this situation, the exit code is 1.
      I spent a lot of time on debugging the inconsisent exit code of parent and child, and then figure it out the problem is caused by checking file descriptor inside the child. Instead, I should check it before fork, thus parent and child will both notice there's a file descriptor error. 

   3. dup2 & close
      Two cases when using dup2(a, b):
      1. a == b, there's no effect
      2. a != b, b is closed if it's opened, and then b is made to refer to the same file table entry as a. When dup2(fd_list[out], 1) is called, stdout is closed, and stdout's file descriptor point to the same file table entry as fd_list[out].

   4. getopt takes the command option's argument and consider it as invalid option.
      In the test script, when the command argument contains a short option, my program fails because the shell would take this as an option and output error "invalid option". The reason why I have this problem is I assigned the optind to a local variable and only retrieve the command option's argument with the local variable, and did not increment the optind. Thus, after processing the command option, the getopt try to read the next option from the optind, which is in the short option of command argument.  

4. References
   1.getopt() & optind https://stackoverflow.com/questions/46636641/how-does-optind-get-assigned-in-c
   2. Explanation on dup2 and close. https://stackoverflow.com/questions/30714315/understanding-dup2-and-closing-file-descriptors